#!/bin/csh -f
#
# Build script for SIFDEC
#
# syntax: install_sifdec
#
# N.Gould, D. Orban & Ph. Toint
# This version: Nov 28 at 11.42pm
#

#  check input arguments (if any)

if ( $#argv != 0 ) then
   echo "Use: install_sifdec"
   exit 1
endif

setenv SIFDEC $PWD
set ARCH = $SIFDEC/build/arch

#
# Prelude to installation phase
#

set UMAKE_COMMAND = "${SIFDEC}/build/scripts/umake -I. -Iconfig"
set UMAKE_OPTIONS = ""
set UMAKE_CPP_OPTIONS = ""

set CORRECT_PLATFORM = "false"
while ( $CORRECT_PLATFORM == "false" ) 
   echo ' Select platform'
   echo
   echo '	(1) Compaq (DEC) alpha'
   echo '	(2) Cray'
   echo '	(3) HP workstation'
   echo '	(4) IBM RS/6000'
   echo '	(5) PC'
   echo '	(6) SGI workstation'
   echo '	(7) SUN workstation'
   echo '	(8) Mac OSX'
   echo '	(0) Other (user-defined)'
   
   set CHOICE = $<
   
   switch ( $CHOICE )
       case "1":
            set CORRECT_PLATFORM = "true"
            setenv MCH "alp"
            setenv MACHINE "Compaq-Alpha"
	    set UMAKE_OPTIONS = "${UMAKE_OPTIONS} -D__osf__"

            set CORRECT_OS = "false"
            while ( $CORRECT_OS == "false" ) 

               echo ' Select operating system'
               echo
               echo '	(1) Digital Unix'
               echo '	(2) Tru-64 Unix'
               echo '	(3) Linux'
               
               set CHOICE = $<

               switch ( $CHOICE )
               case 1:
                  set CORRECT_OS = "true"
                  setenv OS "dux"
                  breaksw
               case 2:
                  set CORRECT_OS = "true"
                  setenv OS "t64"
		  set UMAKE_OPTIONS = "${UMAKE_OPTIONS} -DTru64"
                  breaksw
               case 3:
                  set CORRECT_OS = "true"
                  setenv OS "lnx"
		  set UMAKE_OPTIONS = "${UMAKE_OPTIONS} -DCompaqLinux"
                  breaksw
               default:
                  echo ' Please give an integer between 1 and 3'
               endsw
            end
            breaksw
       case "2":
            set CORRECT_PLATFORM = "true"
            setenv MCH "cry"
            setenv MACHINE "CRAY-T3E"
            setenv OS "unc"
	    set UMAKE_OPTIONS = "${UMAKE_OPTIONS} -D_CRAY"
            breaksw
       case "3":
            set CORRECT_PLATFORM = "true"
            setenv MCH "hp"
            setenv MACHINE "HP-workstation"
	    set UMAKE_OPTIONS = "${UMAKE_OPTIONS} -Dhpux"

            set CORRECT_OS = "false"
            while ( $CORRECT_OS == "false" ) 

               echo ' Select operating system'
               echo
               echo '	(1) HP-UX'
               echo '	(2) Linux'
            
               set CHOICE = $<

               switch ( $CHOICE )
               case 1:
                  set CORRECT_OS = "true"
                  setenv OS "hpu"
		  set UMAKE_OPTIONS = "${UMAKE_OPTIONS} -DHpUx"
                  breaksw
               case 2:
                  set CORRECT_OS = "true"
                  setenv OS "lnx"
		  set UMAKE_OPTIONS = "${UMAKE_OPTIONS} -DHpLinux"
                  breaksw
               default:
                  echo ' Please give an integer between 1 and 2'
               endsw
            end
            breaksw
       case "4":
            set CORRECT_PLATFORM = "true"
            setenv MCH "rs6"
            setenv MACHINE "IBM-RS6000"
	    set UMAKE_OPTIONS = "${UMAKE_OPTIONS} -Dibm"

            set CORRECT_OS = "false"
            while ( $CORRECT_OS == "false" ) 

               echo ' Select operating system'
               echo
               echo '	(1) AIX'
               echo '	(2) Linux'
           
               set CHOICE = $<

               switch ( $CHOICE )
               case 1:
                  set CORRECT_OS = "true"
                  setenv OS "aix"
		  set UMAKE_OPTIONS = "${UMAKE_OPTIONS} -DIbmAix"
                  breaksw
               case 2:
                  set CORRECT_OS = "true"
                  setenv OS "lnx"
		  set UMAKE_OPTIONS = "${UMAKE_OPTIONS} -DIbmLinux"
                  breaksw
               default:
                  echo ' Please give an integer between 1 and 2'
               endsw
            end
            breaksw
       case "5":
            set CORRECT_PLATFORM = "true"
            setenv MCH "pc"
            setenv MACHINE "Intel-like-PC"
            setenv OS "lnx"
	    set UMAKE_OPTIONS = "${UMAKE_OPTIONS} -Dlinux"
	    # The following line is for Red Hat systems
	    set UMAKE_CPP_OPTIONS = "-Ptraditional -Pw"
            breaksw
       case "6":
            set CORRECT_PLATFORM = "true"
            setenv MCH "sgi"
            setenv MACHINE "SGI-workstation"
	    set UMAKE_OPTIONS = "${UMAKE_OPTIONS} -Dsgi"

            set CORRECT_OS = "false"
            while ( $CORRECT_OS == "false" ) 

               echo ' Select operating system'
               echo
               echo '	(1) IRIX'
               echo '	(2) Linux'
            
               set CHOICE = $<

               switch ( $CHOICE )
               case 1:
                  set CORRECT_OS = "true"
                  setenv OS "irx"
		  set UMAKE_OPTIONS = "${UMAKE_OPTIONS} -DSgiIrix"
                  breaksw
               case 2:
                  set CORRECT_OS = "true"
                  setenv OS "lnx"
		  set UMAKE_OPTIONS = "${UMAKE_OPTIONS} -DSgiLinux"
                  breaksw
               default:
                  echo ' Please give an integer between 1 and 2'
               endsw
            end
            breaksw
       case "7":
            set CORRECT_PLATFORM = "true"
            setenv MCH "sun"
            setenv MACHINE "Sun-workstation"
	    set UMAKE_OPTIONS = "${UMAKE_OPTIONS} -Dsun"

            set CORRECT_OS = "false"
            while ( $CORRECT_OS == "false" ) 

               echo ' Select operating system'
               echo
               echo '	(1) Solaris'
               echo '	(2) Linux'

               set CHOICE = $<

               switch ( $CHOICE )
               case 1:
                  set CORRECT_OS = "true"
                  setenv OS "sol"
		  set UMAKE_OPTIONS = "${UMAKE_OPTIONS} -DSunSolaris"
                  breaksw
               case 2:
                  set CORRECT_OS = "true"
                  setenv OS "lnx"
		  set UMAKE_OPTIONS = "${UMAKE_OPTIONS} -DSunLinux"
                  breaksw
               default:
                  echo ' Please give an integer between 1 and 2'
               endsw
            end
            breaksw
       case "8":
            set CORRECT_PLATFORM = "true"
            setenv MCH "mac"
            setenv MACHINE "mac"
            setenv OS "osx"
	    set UMAKE_OPTIONS = "${UMAKE_OPTIONS} -Dmac"
            breaksw
       case "0":
	    set CORRECT_PLATFORM = "true"
	    setenv MCH "gnx"
	    setenv MACHINE "Generic Unix"
	    setenv OS "unknown"
        breaksw
       default:
         echo ' Please give an integer between 0 and 8'
   endsw
end

# Get only the necessary platform-dependent commands
# to complete the installation. A more complete set
# will be generated after the user has chosen the
# compilers and precision they wish to use.

set CPP = 'cpp -P'
sed -f ${SIFDEC}/build/scripts/protect.sed ${SIFDEC}/build/scripts/makefile.cmds | ${CPP} -I${SIFDEC}/config -I. -DFromInstallSifDec ${UMAKE_OPTIONS} | sed -f ${SIFDEC}/build/scripts/gettabs.sed > /tmp/Makefile.cmds.$$
cd /tmp
if( -f "cmds" ) rm -f cmds
make -f Makefile.cmds.$$ cmds >& /dev/null
unalias source
source /tmp/cmds
$RM Makefile.cmds.$$ cmds slash.sed
cd ${SIFDEC}

echo ' Select Fortran compiler'

set COMP = ( `$SED -e '/#.*$/d' ${ARCH}/f.arch | $SED -e '/^ *$/d' | $GREP ${MCH} | $GREP ${OS} | $AWK 'BEGIN{FS=";"}{print $5}'` )
set SYMB = ( `$SED -e '/#.*$/d' ${ARCH}/f.arch | $SED -e '/^ *$/d' | $GREP ${MCH} | $GREP ${OS} | $AWK 'BEGIN{FS=";"}{print $4}'` )
set CMPEXT = ( `$SED -e '/#.*$/d' ${ARCH}/f.arch | $SED -e '/^ *$/d' | $GREP ${MCH} | $GREP ${OS} | $AWK 'BEGIN{FS=";"}{print $3}'` )
set OPSYS = ( `$SED -e '/#.*$/d' ${ARCH}/f.arch | $SED -e '/^ *$/d' | $GREP ${MCH} | $GREP ${OS} | $AWK 'BEGIN{FS=";"}{print $2}'` )
set SYS = ( `$SED -e '/#.*$/d' ${ARCH}/f.arch | $SED -e '/^ *$/d' | $GREP ${MCH} | $GREP ${OS} | $AWK 'BEGIN{FS=";"}{print $1}'` )
set ALLCOMP = ( `$SED -e '/#.*$/d' ${ARCH}/f.arch | $SED -e '/^ *$/d' | $GREP 'all' | $GREP 'all' | $AWK 'BEGIN{FS=";"}{print $5}'` )
set ALLSYMB = ( `$SED -e '/#.*$/d' ${ARCH}/f.arch | $SED -e '/^ *$/d' | $GREP 'all' | $GREP 'all' | $AWK 'BEGIN{FS=";"}{print $4}'` )
set ALLCMPEXT = ( `$SED -e '/#.*$/d' ${ARCH}/f.arch | $SED -e '/^ *$/d' | $GREP 'all' | $GREP 'all' | $AWK 'BEGIN{FS=";"}{print $3}'` )
set ALLOPSYS = ( `$SED -e '/#.*$/d' ${ARCH}/f.arch | $SED -e '/^ *$/d' | $GREP 'all' | $GREP 'all' | $AWK 'BEGIN{FS=";"}{print $2}'` )
set ALLSYS = ( `$SED -e '/#.*$/d' ${ARCH}/f.arch | $SED -e '/^ *$/d' | $GREP 'all' | $GREP 'all' | $AWK 'BEGIN{FS=";"}{print $1}'` )

set COMP = ( ${COMP} ${ALLCOMP} )
set SYMB = ( ${SYMB} ${ALLSYMB} )
set CMPEXT  = ( ${CMPEXT}  ${ALLCMPEXT}  )
set OPSYS = ( ${OPSYS} ${ALLOPSYS} )
set SYS = ( ${SYS} ${ALLSYS} )

set NUMBER = ${#COMP}

set LIST = ( $COMP )
set SYMBLIST = ( $SYMB )
set CMPLIST = ( $CMPEXT )
set OPSYSLIST = ( ${OPSYS} )
set SYSLIST = ( ${SYS} )

set CORRECT_COMPILER = "false"
while ( $CORRECT_COMPILER == "false" ) 

   @ count = 0
   foreach i ( $LIST )
     @ count ++
     set cmpInfo = `echo $COMP[$count] | tr '_' ' '`
     printf '\t[%-2d]  %s\n' $count "$cmpInfo"
   end

   set CHOICE = $<
   
   @ i = 0
   while ( $i < $NUMBER &&  $CORRECT_COMPILER == "false" )
      @ i ++
      if ( $CHOICE == $i ) then
        set CORRECT_COMPILER = "true"
        set CHOICE = $i
      endif
   end
   if ( $CORRECT_COMPILER == "true" ) then
     set COMPILER = $LIST[$CHOICE]
     set CMP = $CMPLIST[$CHOICE]
     set OSTAG = $OPSYSLIST[$CHOICE]
     set SYSTAG = $SYSLIST[$CHOICE]
     set UMAKE_OPTIONS = "${UMAKE_OPTIONS} $SYMBLIST[$CHOICE]"
   else
     echo " Please give an integer between 1 and $NUMBER"
   endif
end


setenv INSTALLPRECISION ""
setenv INSTALLSIZE ""

while ( $INSTALLPRECISION != "S" && $INSTALLPRECISION != "D" )
    echo " Set install precision (D=double, s=single): "
    setenv INSTALLPRECISION $<
    if ( $INSTALLPRECISION == "" ) setenv INSTALLPRECISION "D"
    setenv INSTALLPRECISION `echo $INSTALLPRECISION | tr '[a-z]' '[A-Z]'`
end

switch ($INSTALLPRECISION)
    case S:
	setenv PRECISION "single"
        set PRC = "CS   "
        set PRC90 = '\!S '
	breaksw
    case D:
	setenv PRECISION "double"
        set PRC = "CD   "
        set PRC90 = '\!D '
	breaksw
    default:
	echo "$0: error occured while setting precision. Aborting."
	exit 1
endsw

while ( $INSTALLSIZE != "L" && $INSTALLSIZE != "M" && \
        $INSTALLSIZE != "S" && $INSTALLSIZE != "C" )
    echo " Set install size (L=large, m=medium, s=small, c=customized): "
    setenv INSTALLSIZE $<
    if ( $INSTALLSIZE == "" ) setenv INSTALLSIZE "L"
    setenv INSTALLSIZE `echo $INSTALLSIZE | tr '[a-z]' '[A-Z]'`
end

switch ($INSTALLSIZE)
    case C:
	setenv SIZE "custom"
        set SIZ  = "CCUS"
        set SIZ90  = '\!CUS'
	set UMAKE_OPTIONS = "${UMAKE_OPTIONS} -DCustomSize"
	breaksw
    case L:
	setenv SIZE "large"
        set SIZ  = "CBIG"
        set SIZ90  = '\!BIG'
	set UMAKE_OPTIONS = "${UMAKE_OPTIONS} -DLargeSize"
	breaksw
    case M:
	setenv SIZE "medium"
        set SIZ  = "CMED"
        set SIZ90  = '\!MED'
	set UMAKE_OPTIONS = "${UMAKE_OPTIONS} -DMediumSize"
	breaksw
    case S:
	setenv SIZE "small"
        set SIZ  = "CTOY"
        set SIZ90  = '\!TOY'
	set UMAKE_OPTIONS = "${UMAKE_OPTIONS} -DSmallSize"
	breaksw
    default:
	echo "$0: error occured while setting size. Aborting."
	exit 1
endsw

#
# Now select the directory to install to
#

setenv MYSIFDEC $SIFDEC/SifDec.${SIZE}.${MCH}.${OS}.${CMP}

# so for instance, you would have an install directory called
# SifDec.large.sun.sol.f77 for large version on a
# Sun machine running Solaris. This scheme provides the default.

set YESNO = ""
@ chosen = 0

echo ' By default, SifDec with your selections will be installed in'
echo "  $MYSIFDEC"
echo ' Is this OK (Y/n)?'
while ( $YESNO != 'Y' && $YESNO != 'N' )
    set YESNO = $<
    if ( $YESNO == "" ) set YESNO = "Y"
    set YESNO = `echo $YESNO | tr '[a-z]' '[A-Z]'`
end

switch ( $YESNO )
    case N: 
       while ( ! $chosen )
	    echo " Enter alternative directory for the installation:"
	    setenv MYSIFDEC $<
	    if ( `echo $MYSIFDEC:t` == "" ) setenv MYSIFDEC = `echo $MYSIFDEC:h`
	    if ( "$MYSIFDEC" == "$SIFDEC" ) then
		echo '   This choice is conflictual'
		@ chosen = 0
	    else
		setenv MYSIFDEC $MYSIFDEC
		echo " Using directory $MYSIFDEC"
		@ chosen = 1
	    endif
       end
       breaksw
    case Y: 
       breaksw
endsw

set UMAKE_SPECIAL = ''
if ( -d $MYSIFDEC/single && $PRECISION == 'double' || $PRECISION == 'single' &&  -d $MYSIFDEC/double ) then
    set UMAKE_SPECIAL = '$1'
    $LN -sf $SIFDEC/build/scripts/important $MYSIFDEC/IMPORTANT
    set important=1
else if ( "$PRECISION" == 'double' ) then
    set UMAKE_OPTIONS = "${UMAKE_OPTIONS} -DDoublePrecision"
else
    set UMAKE_OPTIONS = "${UMAKE_OPTIONS} -DSinglePrecision"
endif

#
# Create a "working" directory for the version being installed
#

if (! -e $MYSIFDEC ) $MKDIR $MYSIFDEC

setenv MYSIFDECPREC $MYSIFDEC/$PRECISION
if ( -d $MYSIFDECPREC ) then
    echo " Directory"
    echo "  $MYSIFDECPREC"
    echo " already exists. Proceeding will overwrite it." 
    echo " Do you wish to continue (Y/n)?"
    set YESNO = ""
    while ( $YESNO != 'Y' && $YESNO != 'N' )
	set YESNO = $<
        if ( $YESNO == "" ) set YESNO = "Y"
	set YESNO = `echo $YESNO | tr '[a-z]' '[A-Z]'`
    end

    switch ( $YESNO )
	case Y: 
		breaksw
	case N: 
		echo "$0 : Aborting."
		exit 1
    endsw
else
    $MKDIR $MYSIFDECPREC
endif

#
# Check for a similar distribution already installed
#

cd $SIFDEC
set EXISTS = "0"
set SIFDECVERSION="$PRECISION $SIZE $MACHINE $OS $CMP"

echo ''
printf '     %-30s\t' "Logging operations"

if ( -e log ) then
   cd log
   foreach i ( "*.log" )
	   set EXISTS = `"$CAT" $i | "$GREP" -c "$SIFDECVERSION"`
   end
   if ( $EXISTS != "0" ) then
      set inDir = `"$GREP" "$SIFDECVERSION" "$SIFDEC/log/install.log" | $AWK -F! '{print $3}'`
      echo ''
      echo ' Hmmm... there already seems to be such a version installed in'
      echo "  $inDir"
      echo ' Are you sure you wish to continue (Y/n)?'
      set YESNO = ""
      while ( $YESNO != "Y" && $YESNO != "N" )
	    set YESNO = $<
            if ( $YESNO == "" ) set YESNO = "Y"
	    set YESNO = `echo $YESNO | tr '[a-z]' '[A-Z]'`
      end

      switch ( $YESNO )
             case Y:
                  breaksw
	     case N:
		  echo "$0 : aborting"
		  exit 0
	     default:
		  breaksw
      endsw
   endif
   cd ../
else
    $MKDIR log           # install log files
endif

printf '[Ok]\n'

#  Add a new entry to the log file

printf '     %-30s\t' "Creating directory structure"

if ( $EXISTS == "0" ) then
    echo  "`date` ! $SIFDECVERSION ! $MYSIFDEC" >> $SIFDEC/log/install.log
endif

if (! -e $MYSIFDEC/bin )        $MKDIR $MYSIFDEC/bin
if (! -e $MYSIFDECPREC/config ) $MKDIR $MYSIFDECPREC/config
if (! -e $MYSIFDECPREC/bin )    $MKDIR $MYSIFDECPREC/bin
if (! -e $MYSIFDEC/config )     $MKDIR $MYSIFDEC/config

printf '[Ok]\n'

# The following 'source' puts the timer routine in $CONFIG

source $ARCH/compiler.${SYSTAG}.${OSTAG}.${CMP}
source $ARCH/size.$SIZE

#  Define some useful directories

set CONFIG = $MYSIFDECPREC/config
set BIN    = $MYSIFDECPREC/bin
set SRC    = $SIFDEC/common/src

#
#  Further initializations
#

unset noclobber
set DATE = `date`
echo "#version for ${MACHINE} under ${SYSTEM} with ${CMP} ($DATE)" > $CONFIG/this_build

printf '     %-30s\t' "Copying Umakefiles"

# Put the Umake template and rules files in place
$CP $SIFDEC/config/* $MYSIFDEC/config

# Put the Umakefiles in place
$CP $SIFDEC/build/scripts/umakefile.mysifdecbin        $MYSIFDEC/bin/Umakefile
$CP $SIFDEC/build/scripts/umakefile.mysifdec           $MYSIFDEC/Umakefile
$CP $SIFDEC/build/scripts/umakefile.mysifdecprec       $MYSIFDECPREC/Umakefile
$CP $SIFDEC/build/scripts/umakefile.mysifdecprecbin    $MYSIFDECPREC/bin/Umakefile
$CP $SIFDEC/build/scripts/umakefile.mysifdecprecconfig $MYSIFDECPREC/config/Umakefile
$CP $SIFDEC/build/scripts/makefile.cmds                $MYSIFDECPREC/config/makefile.cmds

printf '[Ok]\n'

set UMAKE_SEQUENCE = "$UMAKE_COMMAND $UMAKE_OPTIONS $UMAKE_CPP_OPTIONS"

printf '     %-30s\t' "Creating installation shortcut"

echo '#\!/bin/csh -f'                             >  $MYSIFDEC/install_mysifdec
echo ''                                           >> $MYSIFDEC/install_mysifdec

# Re-denerate the platform-specific commands if necessary

sed -f ${SIFDEC}/build/scripts/protect.sed ${SIFDEC}/build/scripts/makefile.cmds | ${CPP} -I${SIFDEC}/config -I. -DFromInstallSifDec ${UMAKE_OPTIONS} | sed -f ${SIFDEC}/build/scripts/gettabs.sed > /tmp/Makefile.cmds.$$
cd /tmp
if( -f cmds ) rm -f cmds
make -f Makefile.cmds.$$ cmds >& /dev/null
$RM Makefile.cmds.$$ slash.sed
cd ${SIFDEC}

# Flush these into install_mysifdec

$CAT /tmp/cmds                                    >> $MYSIFDEC/install_mysifdec
$CP /tmp/cmds $MYSIFDEC/cmds.basic
$CHMOD -w $MYSIFDEC/cmds.basic
$RM /tmp/cmds


echo ''                                           >> $MYSIFDEC/install_mysifdec
$CAT $SIFDEC/build/prototypes/usage_mysifdec.pro  >> $MYSIFDEC/install_mysifdec
echo "$UMAKE_SEQUENCE $UMAKE_SPECIAL"             >> $MYSIFDEC/install_mysifdec
echo 'make Makefile'                              >> $MYSIFDEC/install_mysifdec
echo 'make Makefiles'                             >> $MYSIFDEC/install_mysifdec
$CAT $SIFDEC/build/prototypes/run_mysifdec.pro    >> $MYSIFDEC/install_mysifdec
chmod +x $MYSIFDEC/install_mysifdec

printf '[Ok]\n'

printf '     %-30s\t' "Installing README files"

if ( ! (-d $MYSIFDEC/single && -d $MYSIFDEC/double) ) then
    $LN -sf $SIFDEC/build/scripts/readme.mysifdecbin    $MYSIFDEC/bin/README
    $LN -sf $SIFDEC/build/scripts/readme.mysifdec       $MYSIFDEC/README
    $LN -sf $SIFDEC/README                              $MYSIFDEC/README_FIRST
endif
$LN -sf $SIFDEC/build/scripts/readme.mysifdecprecconfig $MYSIFDECPREC/config/README
$LN -sf $SIFDEC/build/scripts/readme.mysifdecprecbin    $MYSIFDECPREC/bin/README

printf '[Ok]\n'

echo ''
echo " Please do not forget to define the environment variable"
echo "    [1] SIFDEC to be"
echo "          $SIFDEC"
echo "    [2] MYSIFDEC to be"
echo "          $MYSIFDEC"
echo ''
echo " as well as setting an appropriate value for MASTSIF,"
echo ' which should point to your main SIF repository.'
echo ''
echo "      In addition, please update your MANPATH to include "
echo "         $SIFDEC/common/man"
echo "      and your PATH to include"
echo "         $MYSIFDEC/bin"
echo ''
echo " (see $SIFDEC/common/doc/readme.cshrc"
echo "  and $SIFDEC/common/doc/readme.bashrc"
echo "  for examples on how to do this)"
echo ''
echo " cd $MYSIFDEC,"
echo " read the README_FIRST and README files"
if ( "$?important" ) then
    echo ''
    echo '-----------------------------------'
    echo " ---and read the file IMPORTANT---"
    echo '-----------------------------------'
    echo ''
endif
echo " then run install_mysifdec."

#
# See if the user wants to continue
#

echo ''
echo "install_sifdec : Do you want install_mysifdec to be run in"
echo " $MYSIFDEC now (Y/n)?"
set YESNO = ""
while ( $YESNO != 'Y' && $YESNO != 'N' )
    set YESNO = $<
    if ( $YESNO == "" ) set YESNO = "Y"
    set YESNO = `echo $YESNO | tr '[a-z]' '[A-Z]'`
end

switch ( $YESNO )
    case Y: 
	cd $MYSIFDEC
	if ( "$?important" ) then
	    if ( "$PRECISION" == 'double' ) then
		./install_mysifdec -DDoublePrecision
	    else
		./install_mysifdec -DSinglePrecision
	    endif
	else
	    ./install_mysifdec
	endif
	breaksw
    case N:
	echo ''
	echo ' To complete the installation, change directory to'
	echo "    $MYSIFDEC"
	echo ' and run install_mysifdec there.'
	echo ''
	exit 0
	breaksw
endsw

# This version serves as a template for the Umakefiles
# We exit here. The rest will be done by umake.

exit 0

# N. Gould, D. Orban and Ph. Toint, dec 5, 2001.

