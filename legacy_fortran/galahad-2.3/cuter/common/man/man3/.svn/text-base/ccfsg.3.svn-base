.\" @(#)ccfsg v1.0 11/2000;
.TH ccfsg 3M "17 Nov 2000"
.SH NAME
CCFSG \- CUTEr tool to evaluate constraint functions values and
possibly gradients in sparse format.
.SH SYNOPSIS
CALL CCFSG( N, M, X, LC, C, NNZJ, LCJAC, CJAC, INDVAR, INDFUN, GRAD )
.SH DESCRIPTION
The CCFSG subroutine evaluates the values of the constraint functions of
the problem decoded from a SIF file by the script \fIsifdecode\fP at the point X, and possibly their
gradients in the constrained minimization case. The gradients are
stored in sparse format. The problem under consideration
consists in minimizing (or maximizing) an objective function
.EQ
f(x)
.EN
over all
.EQ
x
.EN
\(mo
.EQ
R sup n
.EN
subject to

general equations
.EQ
c sub i (x) ~=~ 0,
.EN
.EQ
~(i
.EN
\(mo
.EQ
left { 1 ,..., m sub E right } ),
.EN

general inequalities
.EQ
c sub i sup l (x) ~<=~ c sub i (x) ~<=~ c sub i sup u (x),
.EN
.EQ
~(i
.EN
\(mo
.EQ
left { m sub E + 1 ,..., m right }),
.EN

and simple bounds
.EQ
b sup l ~<=~ x ~<=~ b sup u.
.EN

The objective function is group-partially separable and all constraint functions are partially separable.

.LP 
.SH ARGUMENTS
The arguments of CCFSG are as follows
.TP 5
.B N \fP[in] - integer
the number of variables for the problem,
.TP 5
.B M \fP[in] - integer
the total number of general constraints,
.TP
.B X \fP[in] - real/double precision
an array which gives the current estimate of the solution of the
problem,
.TP
.B LC \fP[in] - integer
the actual declared dimension of C, with LC no smaller than M,
.TP
.B C \fP[out] - real/double precision
an array which gives the values of the general constraint functions
evaluated at X. The i-th component of C will contain the value of c_i
(x),
.TP
.B NNZJ \fP[out] - integer
the number of nonzeros in CJAC,
.TP
.B LCJAC \fP[in] - integer
the actual declared dimensions of CJAC, INDVAR and INDFUN,
.TP
.B CJAC \fP[out] - real/double precision
an array which gives the values of the nonzeros of the general
constraint functions evaluated at X. The i-th entry of CJAC gives the
value of the derivative with respect to variable INDVAR(i) of
constraint function INDFUN(i),
.TP
.B INDVAR \fP[out] - integer
an array whose i-th component is the index of the variable with
respect to which CJAC(i) is the derivative,
.TP
.B INDFUN \fP[out] - integer
an array whose i-th component is the index of the problem function of
which CJAC(i) is the derivative,
.TP
.B GRAD \fP[in] - logical
a logical variable which should be set .TRUE. if the gradient of the
constraint functions are required and .FALSE. otherwise.
.LP
.SH AUTHORS
I. Bongartz, A.R. Conn, N.I.M. Gould, D. Orban and Ph.L. Toint
.SH "SEE ALSO"
\fICUTEr (and SifDec): A Constrained and Unconstrained Testing
Environment, revisited\fP,
   N.I.M. Gould, D. Orban and Ph.L. Toint,
   ACM TOMS, \fB29\fP:4, pp.373-394, 2003.

\fICUTE: Constrained and Unconstrained Testing Environment\fP,
I. Bongartz, A.R. Conn, N.I.M. Gould and Ph.L. Toint, 
TOMS, \fB21\fP:1, pp.123-160, 1995.


sifdecode(1)
