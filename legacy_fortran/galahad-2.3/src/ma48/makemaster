#  Main body of the installation makefile for the MA48 packages

#  N. Gould, D. Orban and Ph. L. Toint.
#  This version: 11 IV 2006

SHELL = /bin/$(BINSHELL)

#  compiler flags

FFLAGS    = $(BASIC) $(OPTIMIZATION) $(DEBUG) $(MODULES) $(F90) $(USUAL)
FFLAGSS   = $(BASIC) $(OPTIMIZATION) $(DEBUG) $(MODULES) $(F90) $(SPECIAL)
FFLAGSN   = $(BASIC) $(NOOPTIMIZATION) $(DEBUG) $(MODULES) $(F90)
FFLAGS77  = $(BASIC) $(OPTIMIZATION) $(DEBUG) $(MODULES) $(F77) $(USUAL)
FFLAGS77S = $(BASIC) $(OPTIMIZATION) $(DEBUG) $(MODULES) $(F77) $(SPECIAL)
RUNFFLAGS =          $(OPTIMIZATION) $(DEBUG) $(MODULES)

#  names of random libraries

LG  = $(OBJ)/libgalahad.a
LGS = $(OBJS)/libgalahad.a
LGD = $(OBJD)/libgalahad.a

BLG  = $(OBJ)/libgalahad_blas.a
BLGS = $(OBJS)/libgalahad_blas.a
BLGD = $(OBJD)/libgalahad_blas.a

LLG  = $(OBJ)/libgalahad_lapack.a
LLGS = $(OBJS)/libgalahad_lapack.a
LLGD = $(OBJD)/libgalahad_lapack.a

HLG  = $(OBJ)/libgalahad_hsl.a
HLGS = $(OBJS)/libgalahad_hsl.a
HLGD = $(OBJD)/libgalahad_hsl.a

MLG  = $(OBJ)/libgalahad_metis.a
MLGS = $(OBJS)/libgalahad_metis.a
MLGD = $(OBJD)/libgalahad_metis.a

#  Archive manipulation strings

ARR = $(AR) -rc $(LG)
RMARFILE = $(GALAHAD)/bin/rmarfile.$(BINSHELL) $(AR) $(GREP) $(LG)
RMOBFILE = $(GALAHAD)/bin/rmobfile.$(BINSHELL) $(RM) $(OBJ)

HARR = $(AR) -rc $(HLG)
HRMARFILE = $(GALAHAD)/bin/rmarfile.$(BINSHELL) $(AR) $(GREP) $(HLG)
HRMOBFILE = $(GALAHAD)/bin/rmobfile.$(BINSHELL) $(RM) $(OBJ)

BARR = $(AR) -rc $(BLG)
BRMARFILE = $(GALAHAD)/bin/rmarfile.$(BINSHELL) $(AR) $(GREP) $(BLG)

LARR = $(AR) -rc $(LLG)
LRMARFILE = $(GALAHAD)/bin/rmarfile.$(BINSHELL) $(AR) $(GREP) $(LLG)

HARR = $(AR) -rc $(HLG)
HRMARFILE = $(GALAHAD)/bin/rmarfile.$(BINSHELL) $(AR) $(GREP) $(HLG)

MARR = $(AR) -rc $(MLG)
MRMARFILE = $(GALAHAD)/bin/rmarfile.$(BINSHELL) $(AR) $(GREP) $MHLG)

#  compilation agenda

ma48s = $(HLGS)(fd15s.o) $(HLGS)(mc71s.o) $(BLGS)(blas.o) \
        $(HLGS)(mc13s.o) $(HLGS)(mc21s.o) $(HLGS)(ma50s.o) \
        $(HLGS)(ma48s.o) # $(HLG)(btf.o)
ma48d = $(HLGD)(fd15d.o) $(HLGD)(mc71d.o) $(BLGD)(blas.o) \
        $(HLGD)(mc13d.o) $(HLGD)(mc21d.o) $(HLGD)(ma50d.o) \
        $(HLGD)(ma48d.o) # $(HLG)(btf.o)

ma51s = $(ma48s) $(HLGS)(ma51s.o)
ma51d = $(ma48d) $(HLGD)(ma51d.o)

hsl_ma48s = $(ma51s) $(HLGS)(hsl_zd11s.o) $(HLGS)(hsl_ma48s.o)
hsl_ma48d = $(ma51d) $(HLGD)(hsl_zd11d.o) $(HLGD)(hsl_ma48d.o)

RMA48S = $(OBJS)/ma48ss.o -L$(OBJS) -lgalahad_hsl -lgalahad_blas
RMA48D = $(OBJD)/ma48ds.o -L$(OBJD) -lgalahad_hsl -lgalahad_blas

RHSLMA48S = $(OBJS)/ma48ss.o -L$(OBJS) -lgalahad_hsl -lgalahad_blas
RHSLMA48D = $(OBJD)/ma48ds.o -L$(OBJD) -lgalahad_hsl -lgalahad_blas

SUCC = precision version) compiled successfully

#  main compilations and runs

all: ma48
test: test_ma

#  all qp routines

ma48v3: ma48v3_$(PRECIS)
	@printf ' %-21s\n' "HSL MA48 routines ($(PRECIS) $(SUCC)" 
ma48v3_silent: ma48v3_$(PRECIS)
ma48v3_single: $(hsl_ma48s)
	$(RANLIB) $(HLGS)
	$(RANLIB) $(BLGS)
ma48v3_double: $(hsl_ma48d)
	$(RANLIB) $(HLGD)
	$(RANLIB) $(BLGD)

ma48ss: $(ma48s) $(OBJS)/ma48ss.o
	$(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o ./run_ma48 $(RMA48S)
	- ./run_ma48 < ./ma48ss.data >& ma48ss.output
	cat ma48ss.output
	rm ./run_ma48

ma48ds: $(ma48d) $(OBJD)/ma48ds.o
	$(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o ./run_ma48 $(RMA48D)
	- ./run_ma48 < ./ma48ds.data >& ma48ds.output
	cat ma48ds.output
	rm ./run_ma48

#  main compilations

#  required blas

blas.o: $(BLG)(blas.o)

$(BLG)(blas.o): ../lapack/blas.f
	@printf ' %-9s %-15s\t\t' "Compiling" "blas" 
	$(CP) ../lapack/blas.f $(OBJ)/blas.f90
	cd $(OBJ); $(FORTRAN) $(FFLAGS77) blas.f90
	cd $(OBJ); $(BARR) blas.o ; $(RM) blas.f90 blas.o
	$(RANLIB) $(BLG)
	@printf '[ OK ]\n'

#  machine constants etc

fd15s.o: $(HLG)(fd15s.o)

$(HLG)(fd15s.o): $(MA48)/fd15s.f
	@printf ' %-9s %-15s\t\t' "Compiling" "fd15s" 
	$(CP) $(MA48)/fd15s.f $(OBJ)/fd15s.f90
	cd $(OBJ); $(FORTRAN) $(FFLAGS77) fd15s.f90
	cd $(OBJ); $(HARR) fd15s.o ; $(RM) fd15s.f90 fd15s.o
	@printf '[ OK ]\n'

fd15d.o: $(HLG)(fd15d.o)

$(HLG)(fd15d.o): $(MA48)/fd15d.f
	@printf ' %-9s %-15s\t\t' "Compiling" "fd15d " 
	$(CP) $(MA48)/fd15d.f $(OBJ)/fd15d.f90
	cd $(OBJ); $(FORTRAN) $(FFLAGS77) fd15d.f90
	cd $(OBJ); $(HARR) fd15d.o ; $(RM) fd15d.f90 fd15d.o
	@printf '[ OK ]\n'

mc71s.o: $(HLG)(mc71s.o)

$(HLG)(mc71s.o): $(MA48)/mc71s.f
	@printf ' %-9s %-15s\t\t' "Compiling" "mc71s" 
	$(CP) $(MA48)/mc71s.f $(OBJ)/mc71s.f90
	cd $(OBJ); $(FORTRAN) $(FFLAGS77) mc71s.f90
	cd $(OBJ); $(HARR) mc71s.o ; $(RM) mc71s.f90 mc71s.o
	@printf '[ OK ]\n'

mc71d.o: $(HLG)(mc71d.o)

$(HLG)(mc71d.o): $(MA48)/mc71d.f
	@printf ' %-9s %-15s\t\t' "Compiling" "mc71d" 
	$(CP) $(MA48)/mc71d.f $(OBJ)/mc71d.f90
	cd $(OBJ); $(FORTRAN) $(FFLAGS77) mc71d.f90
	cd $(OBJ); $(HARR) mc71d.o ; $(RM) mc71d.f90 mc71d.o
	@printf '[ OK ]\n'

#  ma48 and its dependencies

mc13s.o: $(HLG)(mc13s.o)

$(HLG)(mc13s.o): $(MA48)/mc13s.f
	@printf ' %-9s %-15s\t\t' "Compiling" "mc13s" 
	$(CP) $(MA48)/mc13s.f $(OBJ)/mc13s.f90
	cd $(OBJ) ; $(FORTRAN) $(FFLAGS77) mc13s.f90
	cd $(OBJ) ; $(HARR) mc13s.o ; $(RM) mc13s.f90 mc13s.o
	@printf '[ OK ]\n'

mc13d.o: $(HLG)(mc13d.o)

$(HLG)(mc13d.o): $(MA48)/mc13d.f
	@printf ' %-9s %-15s\t\t' "Compiling" "mc13d" 
	$(CP) $(MA48)/mc13d.f $(OBJ)/mc13d.f90
	cd $(OBJ) ; $(FORTRAN) $(FFLAGS77) mc13d.f90
	cd $(OBJ) ; $(HARR) mc13d.o ; $(RM) mc13d.f90 mc13d.o
	@printf '[ OK ]\n'

mc21s.o: $(HLG)(mc21s.o)

$(HLG)(mc21s.o): $(MA48)/mc21s.f
	@printf ' %-9s %-15s\t\t' "Compiling" "mc21s" 
	$(CP) $(MA48)/mc21s.f $(OBJ)/mc21s.f90
	cd $(OBJ) ; $(FORTRAN) $(FFLAGS77) mc21s.f90
	cd $(OBJ) ; $(HARR) mc21s.o ; $(RM) mc21s.f90 mc21s.o
	@printf '[ OK ]\n'

mc21d.o: $(HLG)(mc21d.o)

$(HLG)(mc21d.o): $(MA48)/mc21d.f
	@printf ' %-9s %-15s\t\t' "Compiling" "mc21d" 
	$(CP) $(MA48)/mc21d.f $(OBJ)/mc21d.f90
	cd $(OBJ) ; $(FORTRAN) $(FFLAGS77) mc21d.f90
	cd $(OBJ) ; $(HARR) mc21d.o ; $(RM) mc21d.f90 mc21d.o
	@printf '[ OK ]\n'

ma50s.o: $(HLG)(ma50s.o)

$(HLG)(ma50s.o): $(MA48)/ma50s.f
	@printf ' %-9s %-15s\t\t' "Compiling" "ma50s" 
	$(CP) $(MA48)/ma50s.f $(OBJ)/ma50s.f90
	cd $(OBJ); $(FORTRAN) $(FFLAGS77) ma50s.f90
	cd $(OBJ); $(HARR) ma50s.o ; $(RM) ma50s.f90 ma50s.o
	@printf '[ OK ]\n'

ma50d.o: $(HLG)(ma50d.o)

$(HLG)(ma50d.o): $(MA48)/ma50d.f
	@printf ' %-9s %-15s\t\t' "Compiling" "ma50d " 
	$(CP) $(MA48)/ma50d.f $(OBJ)/ma50d.f90
	cd $(OBJ); $(FORTRAN) $(FFLAGS77) ma50d.f90
	cd $(OBJ); $(HARR) ma50d.o ; $(RM) ma50d.f90 ma50d.o
	@printf '[ OK ]\n'

ma48s.o: $(HLG)(ma48s.o)

$(HLG)(ma48s.o): $(MA48)/ma48s.f
	@printf ' %-9s %-15s\t\t' "Compiling" "ma48s" 
	$(CP) $(MA48)/ma48s.f $(OBJ)/ma48s.f90
	cd $(OBJ); $(FORTRAN) $(FFLAGS77) ma48s.f90
	cd $(OBJ); $(HARR) ma48s.o ; $(RM) ma48s.f90 ma48s.o
	@printf '[ OK ]\n'

ma48d.o: $(HLG)(ma48d.o)

$(HLG)(ma48d.o): $(MA48)/ma48d.f
	@printf ' %-9s %-15s\t\t' "Compiling" "ma48d " 
	$(CP) $(MA48)/ma48d.f $(OBJ)/ma48d.f90
	cd $(OBJ); $(FORTRAN) $(FFLAGS77) ma48d.f90
	cd $(OBJ); $(HARR) ma48d.o ; $(RM) ma48d.f90 ma48d.o
	@printf '[ OK ]\n'

#  hsl_ma48 and its dependencies

hsl_zd11s.o: $(HLG)(hsl_zd11s.o)

$(HLG)(hsl_zd11s.o): $(MA48)/hsl_zd11s.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "hsl_zd11s" 
	$(CP) $(MA48)/hsl_zd11s.f90 $(OBJ)/hsl_zd11s.f90
	cd $(OBJ); $(FORTRAN) $(FFLAGS) hsl_zd11s.f90
	cd $(OBJ); $(HARR) hsl_zd11s.o ; $(RM) hsl_zd11s.f90 hsl_zd11s.o
	$(HRMARFILE) hsl_ma48s.o
	$(HRMARFILE) hsl_ma57s.o
	@printf '[ OK ]\n'

hsl_zd11d.o: $(HLG)(hsl_hsl_zd11d.o)

$(HLG)(hsl_zd11d.o): $(MA48)/hsl_zd11d.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "hsl_zd11d " 
	$(CP) $(MA48)/hsl_zd11d.f90 $(OBJ)/hsl_zd11d.f90
	cd $(OBJ); $(FORTRAN) $(FFLAGS) hsl_zd11d.f90
	cd $(OBJ); $(HARR) hsl_zd11d.o ; $(RM) hsl_zd11d.f90 hsl_zd11d.o
	$(HRMARFILE) hsl_ma48d.o
	$(HRMARFILE) hsl_ma57d.o
	@printf '[ OK ]\n'

hsl_ma48s.o: $(HLG)(hsl_ma48s.o)

$(HLG)(hsl_ma48s.o): $(MA48)/hsl_ma48s.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "hsl_ma48s" 
	$(CP) $(MA48)/hsl_ma48s.f90 $(OBJ)/hsl_ma48s.f90
	cd $(OBJ); $(FORTRAN) $(FFLAGS) hsl_ma48s.f90
	cd $(OBJ); $(HARR) hsl_ma48s.o ; $(RM) hsl_ma48s.f90 hsl_ma48s.o
	$(RMARFILE) sbls.o
	$(RANLIB) $(HLG)
	@printf '[ OK ]\n'

hsl_ma48d.o: $(HLG)(hsl_ma48d.o)

$(HLG)(hsl_ma48d.o): $(MA48)/hsl_ma48d.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "hsl_ma48d " 
	$(CP) $(MA48)/hsl_ma48d.f90 $(OBJ)/hsl_ma48d.f90
	cd $(OBJ); $(FORTRAN) $(FFLAGS) hsl_ma48d.f90
	cd $(OBJ); $(HARR) hsl_ma48d.o ; $(RM) hsl_ma48d.f90 hsl_ma48d.o
	$(RMARFILE) sbls.o
	$(RANLIB) $(HLG)
	@printf '[ OK ]\n'

#  ma51

ma51s.o: $(HLG)(ma51s.o)

$(HLG)(ma51s.o): $(MA48)/ma51s.f
	@printf ' %-9s %-15s\t\t' "Compiling" "ma51s" 
	$(CP) $(MA48)/ma51s.f $(OBJ)/ma51s.f90
	cd $(OBJ); $(FORTRAN) $(FFLAGS77) ma51s.f90
	cd $(OBJ); $(HARR) ma51s.o ; $(RM) ma51s.f90 ma51s.o
	@printf '[ OK ]\n'

ma51d.o: $(HLG)(ma51d.o)

$(HLG)(ma51d.o): $(MA48)/ma51d.f
	@printf ' %-9s %-15s\t\t' "Compiling" "ma51d " 
	$(CP) $(MA48)/ma51d.f $(OBJ)/ma51d.f90
	cd $(OBJ); $(FORTRAN) $(FFLAGS77) ma51d.f90
	cd $(OBJ); $(HARR) ma51d.o ; $(RM) ma51d.f90 ma51d.o
	@printf '[ OK ]\n'
# btf

btf.o: $(HLG)(btf.o)

$(HLG)(btf.o): ../btf/btf.f
	@printf ' %-9s %-15s\t\t' "Compiling" "btf " 
	$(CP) ../btf/btf.f $(OBJ)/btf.f90
	cd $(OBJ); $(FORTRAN) $(FFLAGS77) btf.f90
	cd $(OBJ); $(HARR) btf.o ; $(RM) btf.f90 btf.o
	@printf '[ OK ]\n'

#  test programs

$(OBJS)/hsl_ma48ss.o: $(MA48)/hsl_ma48ss.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "hsl_ma48ss " 
	$(CP) $(MA48)/hsl_ma48ss.f90 $(OBJ)/hsl_ma48ss.f90
	cd $(OBJ); $(FORTRAN) $(FFLAGS) hsl_ma48ss.f90
	@printf '[ OK ]\n'

$(OBJD)/hsl_ma48ds.o: $(MA48)/hsl_ma48ds.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "hsl_ma48ds " 
	$(CP) $(MA48)/hsl_ma48ds.f90 $(OBJ)/hsl_ma48ds.f90
	cd $(OBJ); $(FORTRAN) $(FFLAGS) hsl_ma48ds.f90
	@printf '[ OK ]\n'

#  book keeping

clean: cleanall

cleanall: 
	@printf ' %-14s\t\t' "Removing all $(PRECIS) precision object and module files" 
	$(RM) $(OBJ)/* $(MOD)/*
	@printf '[ OK ]\n'
