
SifDec README file.				           March 2003.

======================================================================

  Please read this file prior to any modification in this directory.

======================================================================

This  directory is (one  of) your $MYSIFDEC directory(ies). The SifDec
installation  procedure   is  based   on  Umakefiles,  which   act  as
meta-Makefiles.  A typical listing of this directory should look  like

    -rw-r--r--     4765 Sep  7 12:04 Makefile
    -rw-r--r--     4765 Sep  7 12:04 Makefile.bak
    -rw-r--r--       57 Sep  7 12:04 README -> ...
    -rw-r--r--       34 Sep  7 12:04 README_FIRST -> ...
    -rw-r--r--      938 Sep  7 12:04 Umakefile
    drwxr-xr-x     4096 Sep  7 12:24 bin
    drwxr-xr-x     4096 Sep  7 12:04 config
    drwxr-xr-x     4096 Sep  7 12:04 double
    -rwxr-xr-x     3905 Sep  7 12:04 install_mysifdec

At first, Makefile  and Makefile.bak should not be  present before you
install your SifDec for the first  time. This is done using the script
./install_mysifdec. The  installation script install_mysifdec contains
a few commands which turn the various Umakefiles scattered around your
$MYSIFDEC directory  structure into Makefiles.  This  process is known
as "bootstrapping"  the Umakefiles.  This  README file is  intended to
serve as  a quick  reference for you  to generate or  re-generate your
Makefiles.

You may now issue the installation command

    % ./install_mysifdec

Once  install_mysifdec  has   finished  bootstrapping   the  Makefiles
recursively through the subdirectories of $MYSIFDEC, just type

    % make clean
    % make all

for a first installation. For a complete re-installation, type

    % make purge
    % make all

After 'make all', you may re-issue a 'make clean' to wind up temporary
files which most  likely clutter up your directories  and are not used
any longer, once SifDec has been built.

As always,  make outputs A LOT  of information --  it basically echoes
every single  action it  performs. If  you do not  like this,  make -s
makes make silent.

Should  you   need  to   adjust  parameters  or   command  definitions
appropriately  for your  local  system,  this should  be  done in  the
Umakefile  or in  some of  its configuration  files and  *not*  in the
Makefile.   Indeed, if  you later  re-generate your  Makefile(s), your
modifications  will be  *lost*.  Please  refer to  the  SifDec General
Documentation on  how to do  this.  The Umake configuration  files for
SifDec  follow a most  usual pattern,  are in  fact a  much simplified
version  of  Imakefiles, which  were  actually  derived  from the  X11
configuration files.

If  any  modification  is  brought  to  either  an  Umakefile  or  the
configuration  files, the  Umakefiles need  to be  bootstrapped again.
Otherwise, the  Makefiles do not  reflect your changes.   The original
configuration  files are  found under  $SIFDEC/config. When  in doubt,
copy these files to $MYSIFDEC/config and run install_mysifdec again.

The  rules used  in  all the  SifDec  Umakefiles are  declared in  the
configuration file $MYSIFDEC/config/Umake.rules.

Please browse through  the given documentation in case  of problem. Do
not hesitate to contact one of the authors. E-mail addresses are given
at the bottom of this file.

The  config directory  contains the  umake configuration  files, where
umake  is  going  to  (try  to)  pick  the  correct  values  for  your
architecture and the  choices you have made during  the first stage of
the installation  process.  The other  directories are part  of SifDec
itself. The Umakefile present in each subdirectory will be responsible
for   building    the   targets    which   should   dwell    in   that
subdirectory. Therefore,  if all the Makefiles  have been bootstrapped
correctly, and  if you want to  build a particular  target found, say,
under $MYSIFDEC/bin, you  may simply cd to $MYSIFDEC/bin  and make the
target there.   The usual dependency rules apply,  as with handwritten
Makefiles. It may happen that a target in a subdirectory requires that
a file in another directory be built.

Umake uses  cpp, the C  preprocessor to bootstrap the  Umakefiles into
the various Makefiles.  If cpp is not available or  does not work well
with    Umake   on    your   system,    other    implementations   are
available. We have however, paid special attention to correctly handle
the  various  versions  of  cpp  we  have  access  to.  An  attractive
possibility would  be to install  the GNU Compiler Collection  on your
system.

Users  should  always  refer  to   the  make  manual  page  and  local
documentation. It may  happen (although every effort has  been made to
avoid this) that  a construct used in the  Umakefiles is not supported
by  your local  implementation  of make.  If  you cannot,  or are  not
willing to, fix  this, it is recommended that you  install GNU make on
your system.

Each  README file  under $MYSIFDEC  attempts to  briefly  describe the
target  supported   by  the   Makefile  found  in   the  corresponding
subdirectory. This may be a helpful quick reference.

The Makefile found in this directory recognizes the following targets:

baseconfig:  makes sure the basic casting scripts are ready to be used

all:	     same as baseconfig

All the  Makefiles found under  $MYSIFDEC support the  'clean' target,
which,  as is  usual, wipes  temporary or  unnecessary files  from the
directory  structure.  Do  not  forget  that one  of  the most  useful
command-line options of make is -n, which will result in make printing
the actions  it *would* take, without actually  taking them. Therefore
make -n clean displays all the files which would be erased.

An additional target  found in some of the  Makefiles is 'purge'. This
target is a  'very very clean' target and  will have make subsequently
rebuild almost everything from scratch.

======================================================================

			      Good luck!

Nick I.M. Gould,				     n.gould@rl.ac.uk,
Dominique Orban,				     orban@cerfacs.fr,
Philippe L. Toint.			    philippe.toint@fundp.ac.be

======================================================================

SifDec README file.				        November 2001.
