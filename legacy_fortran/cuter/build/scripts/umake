#!/bin/csh -f
# umake : a very simple imake
# D. Orban @ ECE, 2002.

@ n = $#argv

# Set default config_dir as 'config' in current directory
set CONFIG_DIR = 'config'
set UMAKEFILE  = ''
set Doptions   = ''
set Uoptions   = ''
set Ioptions   = ''
set Poptions   = ''
@ error = 0

# Process arguments
@ i = 1

while( $i <= $n )
    set opt  = $argv[$i]
    set Dopt = `echo $opt | egrep '^-D'`
    set Uopt = `echo $opt | egrep '^-U'`
    set Iopt = `echo $opt | egrep '^-I'`
    set Copt = `echo $opt | egrep '^-C'`
    set Popt = `echo $opt | egrep '^-P'`
    if( "$Dopt" != "" ) then                # Symbol is defined
	set Doptions = ( $Doptions $Dopt )
    else if( "$Uopt" != "" ) then           # Symbol is undefined
	set Uoptions = ( $Uoptions $Uopt )
    else if( "$Iopt" != "" ) then           # Include dir given
	set Ioptions = ( $Ioptions $Iopt )
    else if( "$Copt" != "" ) then           # Config dir given
	set CONFIG_DIR = `echo $Copt | sed -e 's/^-C//'`
    else if( "$Popt" != "" ) then           # CPP option given
	set Poptions = ( "$Poptions" `echo $Popt | sed -e 's/^-P/-/'` )
    else                                    # Umakefile given
	set UMAKEFILE = $opt
    endif
    @ i++
end

# If Umakefile is not given, try file called Umakefile

if( "$UMAKEFILE" == "" ) then
    if( -f ./Umakefile ) set UMAKEFILE = 'Umakefile'
endif

if( "$UMAKEFILE" == "" || "$CONFIG_DIR" == "" ) @ error = 1

# Usage message

if( $n < 1 || $error == 1 ) then
    echo 'Usage:  umake umakefile [-Dsymbol...] [-Iinclude_dir...] [-Cconfig_dir]'
    echo 'where'
    echo '  umakefile is to be substituted'
    echo '            into the Umake configuration files and'
    echo '            subsequently processed by cpp,'
    echo '            the C PreProcessor. If more than one'
    echo '            umakefile is given, only the last is'
    echo '            processed and the others are discarded'
    echo '  -Dsymbol  defines the symbol <symbol> to be passed'
    echo '            to the C PreProcessor'
    echo '  -Usymbol  undefines the symbol <symbol> to be passed'
    echo '            to the C PreProcessor'
    echo '  -Iinclude_dir defines include dir.'
    echo '            Defaults to -I. -Iconfig'
    echo '  -Cconfig_dir specifies location of Umake.tmpl'
    echo '            Defaults to -Cconfig'
    echo '  -Poption  passes the option -option to cpp.'
endif

set TMPL_FILE = ${CONFIG_DIR}/Umake.tmpl

# Include default -I options if none are given
if( "${Ioptions}" == "" ) set Ioptions = '-I. -Iconfig'

# If sed files are not in $CUTER/build/scripts, please update
set SEDLOC = ${CUTER}/build/scripts

# Debug
#echo " Umakefile : $UMAKEFILE"
#echo " CONFIG_DIR: $CONFIG_DIR"
#echo " Doptions  : $Doptions"
#echo " Ioptions  : $Ioptions"
#echo " Poptions : $Poptions"

# Perform two passes of preprocessing through the Umakefile,
# substitute backslashes and newlines and remove
# consecutive blank lines (leaving only one).

set CPP = "cpp -P ${Poptions} ${Ioptions} ${Doptions} ${Uoptions}"

# Read in basic commands

source ${MYCUTER}/cmds.basic

# If current dir already contains a Makefile, save it
if( -f Makefile ) then
    ${MV} Makefile Makefile.bak
endif

# Protect tabs to account for CPPs which erase them
if( ! -f ${CONFIG_DIR}/Umake.rules.tabsafe ) then
    ${SED} -f ${SEDLOC}/protect.sed ${CONFIG_DIR}/Umake.rules > ${CONFIG_DIR}/Umake.rules.tabsafe
endif
if( ! -f ${UMAKEFILE}.tabsafe ) then
    ${SED} -f ${SEDLOC}/protect.sed ${UMAKEFILE} > ${UMAKEFILE}.tabsafe
endif
if( -f makefile.cmds ) then
    ${SED} -f ${SEDLOC}/protect.sed makefile.cmds > makefile.cmds.tabsafe
endif

# Protect tabs again in included files, then recover them
${SED} -e "s/INCLUDE_UMAKEFILE/<${UMAKEFILE}.tabsafe>/" ${TMPL_FILE} | ${CPP} | ${SED} -f ${SEDLOC}/protect.sed | ${CPP} | ${SED} -e 's/BKSL/\\/g' -f ${SEDLOC}/newline.sed -e 's/^ *//g' | ${SED} -f ${SEDLOC}/flush.sed | ${SED} -f ${SEDLOC}/gettabs.sed | ${SED} -e 's/ *\\ *$/ \\/g' > Makefile

if( -f ${CONFIG_DIR}/Umake.rules.tabsafe ) then
    ${RM} ${CONFIG_DIR}/Umake.rules.tabsafe
endif
${RM} Umakefile.tabsafe
${RM} makefile.cmds.tabsafe

exit 0
