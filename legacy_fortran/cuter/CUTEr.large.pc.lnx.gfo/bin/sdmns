#!/bin/csh -f
# sdmns: script to decode a sif file and then run MNS on the output
#  ( Last modified on 23 Dec 2000 at 17:29:56 )
#
#{version}
#version for Intel-like-PC under Linux with gfo (Tue Apr 18 22:18:11 CST 2017)
#
# Use: sdmns [-s] [-h] [-k] [-o j] [-l secs] [-show] [-param name=value[,name=value...]] [-debug] probname[.SIF]
#
# where: options -s     : run the single precision version
#                         (Default: run the double precision version)
#                -h     : print this help and stop execution
#                -k     : keep the load module after use
#                         (Default: delete the load module)
#                -o     : 0 for silent mode, 1 for brief description of
#                         the stages executed.
#                         (Default: -o 0)
#                -l     : sets a limit of secs second on the runtime
#                         (Default: 99999999 seconds)
#                -show  : displays possible parameter settings for
#                         probname[.SIF]. Other options are ignored
#                -param : cast probname[.SIF] against explicit parameter
#                         settings. Several parameter settings may be
#                         given as a comma-separated list following
#                         -param or using several -param flags.
#                         Use -show to view possible settings
#                -debug : links all the libraries, creates the executable
#                         and stop to allow debugging. This option
#                         automatically disables -n and enables -k.
#
#       probname      probname.SIF is the name of the file containing
#                     the SIF file for the problem of interest.
#

#
#  N. Gould, D. Orban & Ph. Toint, November 7th, 2000
#

#{cmds}
#
#  System specifications
#

set SYSTEM       =  "Linux"
set KEYSYS       =  "CUNIX"

#
#  Directory for temporary files
#

set TMP          =   "/tmp"

#
#  basic system commands
#

set MKDIR        =   "/bin/mkdir"
set CP           =   "/bin/cp"
set RM           =   "/bin/rm -f"
set MV           =   "/bin/mv"
set CAT          =   "/bin/cat"
set CHMOD        =   "/bin/chmod"
set SED          =   "/bin/sed"
set LN           =   "/bin/ln"
set LS           =   "/bin/ls"
set AR           =   "/usr/bin/ar"
set RMDIR        =   "/bin/rmdir"
set GREP         =   "/bin/grep"
set AWK          =   "/usr/bin/gawk"
set HEAD         =   "/usr/bin/head"
set TAIL         =   "/usr/bin/tail"
set WC           =   "/usr/bin/wc"
set MAKE         =   "/usr/bin/make"

#
#  Fortran compilation and loading
#

set COMPILE      = "gfortran -c -ffixed-form -fno-second-underscore"
set LOAD         = "gfortran -ffixed-form -fno-second-underscore"
set ISF9095      = "yes"
set COMPILE9095  = "gfortran -c -fno-second-underscore"
set LOAD9095     = "gfortran -fno-second-underscore"
set FFLAGS       = "-O"
set SPECIALFLAGS = ""

#
#  C compilation and loading
#

set CCOMPILE     = ""
set CLOAD        = "CLoadCmd"
set CFLAGS       = "CFlags"
set SPECIALLIBS  = "SpecialLibs"

##
## Note: Recent versions of Matlab use a single script, mex,
##       to compile both C and Fortran code. This makes the
##       commands cmex and fmex obsolete. Change the
##       following lines according to your system specifications.
##
 
set MEXFORTRAN   = "/usr/bin/mex"
set MEXFFLAGS    = "-fortran"

#
# Environment check
#

envcheck
if( $status != 0 ) exit $status

#
#  define a short acronym for the package to which you wish to make an interface
#

setenv caller sdmns
setenv PAC mns

#
#  define the name of the subdirectory of $CUTER/common/src/pkg
#  in which the package lies
#

setenv PACKAGE mns

#
#  define the system libraries needed by the package
#  using the format -lrary to include library.a
#

setenv SYSLIBS ""

#
#  define the name of the object file for the package which must lie in
#  $MYCUTER/(precision)/bin, where (precision) is either single or double
#

setenv PACKOBJ minos.o

#
#  Check the arguments
#

set PRECISION = "double"
@ last=$#argv
@ i=1

while ($i <= $last)
  set opt=$argv[$i]
  if("$opt" == '-s')then
    set PRECISION = "single"
  else if("$opt" == '-h' || "$opt" == '--help' )then
    $MYCUTER/bin/helpmsg
    exit 0
  endif
  @ i++
end

#
#  Check that the requested precision is available
#

if ( $PRECISION == "single" ) then
    echo " ERROR: $PACKAGE is not available in $PRECISION precision. "
    echo "        Rerun without -s."
    exit 1
endif

#
#  define the name of the package specification file (if any)
#  (this possibly precision-dependent file must either lie in
#  the current directory or in $CUTER/common/src/pkg/$PACKAGE/ )
#

setenv SPECS "MINOS.SPC"

#  decode the problem file

#{sifdecode}
if( $?MYSIFDEC ) then
	$MYSIFDEC/bin/sifdecode $argv
        if ( $status != 0 ) exit $status
else
	echo " ${caller} : environment variable MYSIFDEC not set"
	echo "      Either SifDec is not installed or you"
	echo "      should properly set MYSIFDEC"
	exit 7
endif

#
#  open the MINOS specs and basis files, using the default specs if necessary
#

@ last = $#argv
if ( -e $argv[$last].BASIS ) $CP $argv[$last].BASIS MINOS.BASIS

$LN -fs MINOS.SPC fort.4
if ( -e fort.9 ) $RM fort.9
if ( -e MINOS.BASIS ) $LN -fs MINOS.BASIS fort.11
if ( -e fort.12 ) $RM fort.12

#  run the package

@ n = $last - 1
$MYCUTER/bin/runpackage $argv[1-$n] -n

if ( $status != 0 ) exit $status

#  tidy up the current directory, deleting all junk.

if ( -e fort.4 ) $RM fort.4
if ( -e fort.9 ) $MV fort.9  $argv[$last].mns
if ( -e fort.11) $RM fort.11
if ( -e MINOS.BASIS) $MV MINOS.BASIS $argv[$last].BASIS
if ( -e fort.12) $MV fort.12 $argv[$last].NEWBASIS


